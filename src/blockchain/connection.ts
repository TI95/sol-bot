import {   getAssociatedTokenAddress } from "@solana/spl-token";
import { Liquidity, LiquidityPoolKeys, LiquidityPoolKeysV4, TokenAmount } from "@raydium-io/raydium-sdk";
 import { Connection, Keypair, Transaction, SystemProgram, PublicKey } from "@solana/web3.js";
import axios from "axios";
import { tokenData } from "../types/token";

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ Solana
const connection = new Connection("https://api.mainnet-beta.solana.com", "confirmed");

// –ö–æ—à–µ–ª–µ–∫
const wallet = Keypair.fromSecretKey(
  new Uint8Array(JSON.parse(process.env.PRIVATE_KEY || "[]"))
);

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞
export const buyToken = async (tokenAddress: PublicKey, amount: number) => {
  try {
    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: wallet.publicKey,
        toPubkey: tokenAddress,
        lamports: amount,
      })
    );
    transaction.sign(wallet);
    const signature = await connection.sendRawTransaction(transaction.serialize());
    console.log("‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", signature);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:", error);
  }
};



// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞
export const sellToken = async (tokenAddress: string) => {
    try {
      console.log(`üî¥ –ü—Ä–æ–¥–∞–µ–º —Ç–æ–∫–µ–Ω: ${tokenAddress}`);
  
      // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
      const poolInfo = await getLiquidityPool(tokenAddress);
      if (!poolInfo) {
        console.error("‚ùå –ü—É–ª –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
      }
  
      // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–µ–∫—É—â–µ–≥–æ –∏ USDC/SOL)
      const tokenMint = new PublicKey(tokenAddress);
      const baseTokenAccount = await getAssociatedTokenAddress(tokenMint, wallet.publicKey);
      const quoteTokenAccount = await getAssociatedTokenAddress(poolInfo.quoteMint, wallet.publicKey);
  
      // 3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º swap-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const amountIn = new TokenAmount(poolInfo.baseDecimals, 1_000_000); // 1 —Ç–æ–∫–µ–Ω (–ø—Ä–∏–º–µ—Ä)
      const { transaction } = await Liquidity.makeSwapInstruction({
        connection,
        poolKeys: poolInfo,
        userKeys: {
          owner: wallet.publicKey,
          tokenAccounts: [
            { pubkey: baseTokenAccount, isSigner: false, isWritable: true },
            { pubkey: quoteTokenAccount, isSigner: false, isWritable: true },
          ],
        },
        amountIn,
        minAmountOut: new TokenAmount(poolInfo.quoteDecimals, 0), // –ú–∏–Ω–∏–º—É–º –¥–ª—è –∑–∞—â–∏—Ç—ã
      });
  
      // 4Ô∏è‚É£ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      transaction.sign(wallet);
      const signature = await connection.sendRawTransaction(transaction.serialize());
      console.log(`‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: https://solscan.io/tx/${signature}`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ:", error);
    }
  };
  
  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
  const getLiquidityPool = async (tokenAddress: string): Promise<LiquidityPoolKeys | null> => {
    try {
      const { data } = await axios.get(`https://api.dexscreener.com/latest/dex/tokens/${tokenAddress}`);
      const pool = data.pairs.find((p: tokenData) => p.pairs.dexId === "Raydium");
      if (!pool) return null;
  
      return {
        id: new PublicKey(pool.pairAddress),
        baseMint: new PublicKey(pool.baseToken.address),
        quoteMint: new PublicKey(pool.quoteToken.address),
        baseDecimals: pool.baseToken.decimals,
        quoteDecimals: pool.quoteToken.decimals,
        lpMint: new PublicKey(pool.lpToken.address),
        lpDecimals: pool.lpToken.decimals,
        version: 4,
        programId: new PublicKey(pool.programId),
        authority: new PublicKey(pool.authority),
        openOrders: new PublicKey(pool.openOrders),
        targetOrders: new PublicKey(pool.targetOrders),
        baseVault: new PublicKey(pool.baseVault),
        quoteVault: new PublicKey(pool.quoteVault),
        withdrawQueue: new PublicKey(pool.withdrawQueue),
        lpVault: new PublicKey(pool.lpVault),
        marketVersion: pool.marketVersion,
        marketProgramId: new PublicKey(pool.marketProgramId),
        marketId: new PublicKey(pool.marketId),
        marketAuthority: new PublicKey(pool.marketAuthority),
        marketBaseVault: new PublicKey(pool.marketBaseVault),
        marketQuoteVault: new PublicKey(pool.marketQuoteVault),
        marketBids: new PublicKey(pool.marketBids),
        marketAsks: new PublicKey(pool.marketAsks),
        marketEventQueue: new PublicKey(pool.marketEventQueue),
        lookupTableAccount: new PublicKey(pool.lookupTableAccount),
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–∞:", error);
      return null;
    }
  };

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
export const getTokenPrice = async (tokenAddress: string): Promise<number> => {
  try {
    const response = await axios.get(`https://api.dexscreener.com/latest/dex/tokens/${tokenAddress}`); //ok
    return response.data.pairs[0]?.priceUsd || 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—É
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã:", error);
    return 0;
  }
};
