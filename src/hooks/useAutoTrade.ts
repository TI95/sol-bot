import { useEffect, useState } from "react";
import { usePools } from "./usePools";
import { buyToken, sellToken, getTokenPrice } from "../blockchain/connection";
import { PublicKey } from "@solana/web3.js";

// –•—Ä–∞–Ω–∏–º —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
const purchasedTokens: Record<string, number> = {}; // { "–∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞": —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ }

export const useAutoTrade = () => {
  const pools = usePools();
  const [prices, setPrices] = useState<Record<string, number>>({});

  useEffect(() => {
    if (!pools) return;

    pools.forEach(async (pool) => {
      const tokenAddress = pool.baseToken.address;
      const publicKey = new PublicKey(tokenAddress);

      // ‚úÖ –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∫—É–ø–ª–µ–Ω
      if (!purchasedTokens[tokenAddress]) {
        const price = await getTokenPrice(tokenAddress);
        purchasedTokens[tokenAddress] = price; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
        console.log(`‚úÖ –ö—É–ø–∏–ª–∏ ${tokenAddress} –ø–æ —Ü–µ–Ω–µ ${price}`);
        buyToken(publicKey, 10000000);
      }
    });
  }, [pools]);

  // üìå –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ü–µ–Ω—É –∏ –ø—Ä–æ–¥–∞–µ–º –ø—Ä–∏ +50%
  useEffect(() => {
    const interval = setInterval(async () => {
      for (const tokenAddress of Object.keys(purchasedTokens)) {
        const currentPrice = await getTokenPrice(tokenAddress);
        setPrices((prev) => ({ ...prev, [tokenAddress]: currentPrice }));

        const buyPrice = purchasedTokens[tokenAddress];

        if (currentPrice >= buyPrice * 1.5) {
          console.log(`üìà –ü—Ä–æ–¥–∞–µ–º ${tokenAddress} –∑–∞ ${currentPrice}`);
          sellToken(tokenAddress); // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
          delete purchasedTokens[tokenAddress]; // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        }
      }
    }, 10000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 10 —Å–µ–∫

    return () => clearInterval(interval);
  }, []);

  return prices; // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ UI
};
